import React, { useRef } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Checkbox } from "@/components/ui/checkbox";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Progress } from "@/components/ui/progress";
import { 
  FileDown, Mail, Link, Printer, Share2, 
  Target, Zap, Calendar, Trophy, CheckCircle, 
  FileText, Clock, TrendingUp 
} from "lucide-react";
import { useReactToPrint } from "react-to-print";
import { toast } from "@/hooks/use-toast";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

interface MetricCardProps {
  icon: React.ReactNode;
  label: string;
  value: string;
  progress?: number;
  trend?: string;
  color?: "success" | "primary" | "warning" | "default";
}

function MetricCard({ icon, label, value, progress, trend, color = "default" }: MetricCardProps) {
  const colorClasses = {
    success: "text-emerald-600 dark:text-emerald-400 bg-emerald-50 dark:bg-emerald-950/30",
    primary: "text-brand-orange-600 dark:text-brand-orange-400 bg-brand-orange-50 dark:bg-brand-orange-950/30",
    warning: "text-amber-600 dark:text-amber-400 bg-amber-50 dark:bg-amber-950/30",
    default: "text-muted-foreground bg-muted/50"
  };

  return (
    <Card className="shadow-sm">
      <CardContent className="pt-6">
        <div className="flex items-start justify-between mb-2">
          <div className={`h-10 w-10 rounded-full flex items-center justify-center ${colorClasses[color]}`}>
            {icon}
          </div>
          {trend && (
            <Badge variant="outline" className="ml-2">
              <TrendingUp className="h-3 w-3 mr-1" />
              {trend}
            </Badge>
          )}
        </div>
        <p className="mobile-caption text-muted-foreground mb-1">{label}</p>
        <p className="mobile-heading-md font-bold">{value}</p>
        {progress !== undefined && (
          <Progress value={progress} className="h-2 mt-2" />
        )}
      </CardContent>
    </Card>
  );
}

interface ShareSummaryV2Props {
  userData?: {
    userName?: string;
    dateRange?: string;
    routines?: Array<{
      name: string;
      frequency: string;
      status: string;
    }>;
    recentWins?: Array<{
      text: string;
      date: string;
      category: string;
    }>;
    notes?: Array<{
      content: string;
      date: string;
    }>;
    metrics?: {
      actionsCompleted: number;
      totalActions: number;
      streak: number;
      streakTrend: string;
    };
  };
}

export function ShareSummaryV2({ userData }: ShareSummaryV2Props) {
  const printRef = useRef<HTMLDivElement>(null);

  const handlePrint = useReactToPrint({
    documentTitle: `MyRhythm Report - ${userData?.userName || 'User'} - ${userData?.dateRange || new Date().toLocaleDateString()}`,
    contentRef: printRef,
  });

  const handleEmailReport = () => {
    const subject = encodeURIComponent(`MyRhythm Report - ${userData?.dateRange || new Date().toLocaleDateString()}`);
    const body = encodeURIComponent(`Please find my MyRhythm progress report attached.\n\nGenerated by MyRhythm`);
    window.open(`mailto:?subject=${subject}&body=${body}`, '_blank');
    toast({ title: "Email client opened", description: "Compose your email to share the report" });
  };

  const handleCopyLink = () => {
    navigator.clipboard.writeText(window.location.href);
    toast({ title: "Link copied!", description: "Share this link with your team" });
  };

  const defaultData = {
    userName: userData?.userName || "User",
    dateRange: userData?.dateRange || `${new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - Today`,
    metrics: userData?.metrics || {
      actionsCompleted: 12,
      totalActions: 24,
      streak: 7,
      streakTrend: "+2"
    },
    routines: userData?.routines || [
      { name: "Morning Review", frequency: "Daily at 8:00 AM", status: "Active" },
      { name: "Weekly Planning", frequency: "Mondays at 9:00 AM", status: "Active" },
      { name: "Evening Reflection", frequency: "Daily at 8:00 PM", status: "Paused" }
    ],
    recentWins: userData?.recentWins || [
      { text: "Completed Q1 strategic review presentation", date: "2 days ago", category: "Work" },
      { text: "Maintained daily exercise routine for 2 weeks", date: "3 days ago", category: "Health" },
      { text: "Successfully onboarded new team member", date: "5 days ago", category: "Leadership" }
    ],
    notes: userData?.notes || [
      { content: "Team meeting went well - everyone aligned on Q2 goals", date: "Yesterday" },
      { content: "Need to follow up with finance on budget approval", date: "2 days ago" }
    ]
  };

  const completionRate = Math.round((defaultData.metrics.actionsCompleted / defaultData.metrics.totalActions) * 100);

  return (
    <div className="space-y-4">
      {/* Share Actions */}
      <div className="flex items-center justify-between">
        <h2 className="mobile-heading-lg">Your Progress Report</h2>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" className="touch-target">
              <Share2 className="h-4 w-4 mr-2" />
              Share Report
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end" className="w-48">
            <DropdownMenuItem onClick={handlePrint}>
              <FileDown className="h-4 w-4 mr-2" />
              Download PDF
            </DropdownMenuItem>
            <DropdownMenuItem onClick={handleEmailReport}>
              <Mail className="h-4 w-4 mr-2" />
              Email Report
            </DropdownMenuItem>
            <DropdownMenuItem onClick={handleCopyLink}>
              <Link className="h-4 w-4 mr-2" />
              Copy Link
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem onClick={handlePrint}>
              <Printer className="h-4 w-4 mr-2" />
              Print Preview
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>

      {/* Printable Content */}
      <div ref={printRef} className="space-y-6 bg-background p-4 md:p-6">
        {/* Header Section - Material Design 3 Elevated Card */}
        <Card className="bg-gradient-to-r from-primary/10 to-primary/5 border-l-4 border-primary shadow-sm">
          <CardHeader>
            <div className="flex items-center gap-3">
              <Avatar className="h-12 w-12">
                <AvatarFallback className="bg-primary text-primary-foreground">
                  {defaultData.userName.charAt(0).toUpperCase()}
                </AvatarFallback>
              </Avatar>
              <div>
                <CardTitle className="mobile-heading-lg">MyRhythm Progress Report</CardTitle>
                <p className="mobile-label text-muted-foreground">
                  {defaultData.userName} â€¢ {defaultData.dateRange}
                </p>
              </div>
            </div>
          </CardHeader>
        </Card>

        {/* KPI Section - Material Design Chips + Progress */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
          <MetricCard
            icon={<Target className="h-5 w-5" />}
            label="Actions Completed"
            value={`${defaultData.metrics.actionsCompleted}/${defaultData.metrics.totalActions}`}
            progress={completionRate}
            color="success"
          />
          <MetricCard
            icon={<Zap className="h-5 w-5" />}
            label="Current Streak"
            value={`${defaultData.metrics.streak} days`}
            trend={defaultData.metrics.streakTrend}
            color="primary"
          />
          <MetricCard
            icon={<Calendar className="h-5 w-5" />}
            label="Active Routines"
            value={defaultData.routines.filter(r => r.status === 'Active').length.toString()}
            color="default"
          />
          <MetricCard
            icon={<Trophy className="h-5 w-5" />}
            label="Recent Wins"
            value={defaultData.recentWins.length.toString()}
            color="warning"
          />
        </div>

        {/* Routines Section - Apple HIG List */}
        <Card className="shadow-sm">
          <CardHeader>
            <div className="flex items-center gap-2">
              <Calendar className="h-5 w-5 text-primary" />
              <CardTitle className="mobile-heading-md">Active Routines</CardTitle>
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {defaultData.routines.map((routine, index) => (
                <div key={index} className="flex items-center gap-3 py-3 border-b last:border-0">
                  <Checkbox checked={routine.status === 'Active'} />
                  <div className="flex-1">
                    <p className="mobile-body font-medium">{routine.name}</p>
                    <p className="mobile-caption text-muted-foreground">{routine.frequency}</p>
                  </div>
                  <Badge variant={routine.status === 'Active' ? 'default' : 'secondary'}>
                    {routine.status}
                  </Badge>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Wins Section - Timeline View */}
        <Card className="shadow-sm">
          <CardHeader>
            <div className="flex items-center gap-2">
              <Trophy className="h-5 w-5 text-amber-500" />
              <CardTitle className="mobile-heading-md">Recent Wins</CardTitle>
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {defaultData.recentWins.map((win, index) => (
                <div key={index} className="flex gap-3">
                  <div className="relative">
                    <div className="h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center">
                      <CheckCircle className="h-5 w-5 text-primary" />
                    </div>
                    {index < defaultData.recentWins.length - 1 && (
                      <div className="absolute top-10 left-5 w-0.5 h-8 bg-border" />
                    )}
                  </div>
                  <div className="flex-1 pt-1">
                    <p className="mobile-body">{win.text}</p>
                    <p className="mobile-caption text-muted-foreground mt-1">
                      {win.date} â€¢ {win.category}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Notes Section - Collapsible */}
        <Accordion type="single" collapsible className="w-full">
          <AccordionItem value="notes" className="border rounded-lg px-4">
            <AccordionTrigger className="hover:no-underline">
              <div className="flex items-center gap-2">
                <FileText className="h-5 w-5 text-primary" />
                <span className="mobile-heading-md">Notes & Insights</span>
              </div>
            </AccordionTrigger>
            <AccordionContent>
              <div className="space-y-3 pt-2">
                {defaultData.notes.map((note, index) => (
                  <Card key={index} className="bg-muted/50">
                    <CardContent className="pt-4">
                      <p className="mobile-body">{note.content}</p>
                      <div className="flex items-center gap-2 mt-2">
                        <Clock className="h-3 w-3 text-muted-foreground" />
                        <p className="mobile-caption text-muted-foreground">{note.date}</p>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </AccordionContent>
          </AccordionItem>
        </Accordion>

        {/* Footer */}
        <div className="text-center pt-6 border-t">
          <p className="mobile-caption text-muted-foreground">
            Generated by MyRhythm â€¢ {new Date().toLocaleDateString('en-US', { 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric' 
            })}
          </p>
        </div>
      </div>
    </div>
  );
}
